@page "/gun"
@namespace Application.Pages
@using Application.Components;
@using Business;
@using Business.Services;
@using Models;
@using Models.Common;
@using Models.Builder;
@using Business.Factories;

@inject IItemFactory<Gun, GunRandomizerFactoryParameters> factory
@inject ILogger<GunCrafter> logger
@inject IGuildService guildService

<h1>Guns</h1>
<hr />
<PageTitle>B&B: Check out these guns!</PageTitle>

<EditForm Model=@gunBuilder OnValidSubmit="Roll" class="well form-horizontal">
  <DataAnnotationsValidator />  
  <ValidationSummary />

  <div class="form-group" >
     <label class="col-md-4 control-label">Player Level:</label>
     <div class="col-md-4">
         <InputNumber @bind-Value="gunBuilder.PlayerLevel" name="PlayerLevel" class="form-control" aria-label="Player Level"/>
     </div>
  </div>
  <div class="form-group">
     <label class="col-md-4 control-label">Rarity</label>
     <div class="col-md-4">
        <NullableEnumSelect @bind-Value="gunBuilder.Rarity" class="form-control" aria-label="Rarity">
              <option value="">Random</option>
              @foreach (var rarity in Enum.GetValues(typeof(Rarity)))
              {
                  <option value="@rarity">@rarity</option>
              }
          </NullableEnumSelect>
      </div>
  </div>
  <div class="form-group">
     <label class="col-md-4 control-label">Gun Type</label>
     <div class="col-md-4">
       <NullableEnumSelect Value="@gunBuilder.GunType" ValueExpression="@(() => gunBuilder.GunType)"  class="form-control" aria-label="Gun Type" ValueChanged="@((GunType? value) => FilterByGunTypes(value))">
              <option value="">Random</option>              
              @foreach (var gunType in Enum.GetValues(typeof(GunType)))
              {
                  <option value="@gunType">@(((GunType)gunType).GetDescription())</option>
              }
        </NullableEnumSelect>
    </div>
  </div>

  @if (gunBuilder.GunType != null && guilds != null && guilds.Any())
  {
    <div class="form-group">
     <label class="col-md-4 control-label">Preferred Guild</label>
     <div class="col-md-4">
       <InputSelect @bind-Value="gunBuilder.Guild" class="form-control" aria-label="Preferred Guild">
              <option value="">Random</option>              
              @foreach (var guild in guilds)
              {
                  <option value="@guild.Name">@guild.Name</option>
              }
        </InputSelect>
      </div>
    </div>
  }

  <div class="form-group">
     <label class="col-md-4 control-label">Use Prefixes <input type="checkbox" @bind="gunBuilder.AllowPrefixes" aria-label="Allows Prefixes"/></label>
  </div>
  <div class="form-group">
     <label class="col-md-4 control-label">Use RedTexts <input type="checkbox" @bind="gunBuilder.AllowRedTexts" aria-label="Allows RedText"/></label>
  </div>
  <hr class="divider">
  <div class="form-group">
    <input type="submit" class="btn btn-primary" value="Roll"/>
  </div>
</EditForm>

@if (gun != null)
{
  <div id="cards"  class="card_container">  
    <GunViewer CraftedGun=@gun.Item/>
  </div>
}

@code {
  GunRandomizerFactoryParameters gunBuilder = new GunRandomizerFactoryParameters();

  List<Guild> guilds = null;

  ItemWrapper<Gun> gun = null;


  void FilterByGunTypes(GunType? gunType)
  {
    gunBuilder.GunType = gunType;
    guilds = guildService.GetGuildsThatProduceGunType(gunType);
    this.StateHasChanged();
  } 

  void Roll(EditContext editContext)
  {
    logger.LogDebug("Roll");
    System.Diagnostics.Debug.WriteLine("Roll");
    gun = factory.Manufacture(gunBuilder);
  }
}
