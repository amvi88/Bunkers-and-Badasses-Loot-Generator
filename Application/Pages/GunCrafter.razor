@page "/gun-crafter"
@namespace Application.Pages
@using Business.Services;
@using Models.Common;
@using Models.Builder;

@inherits BaseItemViewer
@inject ILogger<GunCrafter> logger
@inject IGuildService guildService
@inject IWeaponCustomizationService weaponCustomizationService

<h1>Guns</h1>
<hr />
<PageTitle>B&B: Check out these guns!</PageTitle>

<div class="row">
  <div class="col-md-8">
    <EditForm Model=@gun>
      <DataAnnotationsValidator />
      <ValidationSummary />

      <div class="form-group">
        <label for="WeaponLevel" class="control-label">Level:</label>
        <InputNumber Value="gun.Level" ValueExpression="@(() => gun.Level)"
            ValueChanged="@((int value) => LevelChanged(value))" name="WeaponLevel" class="form-control" aria-label="Weapon Level" />
      </div>
      <div class="form-group">
        <label for="text" class="control-label">Name:</label>
        <InputText @bind-Value="gun.Name" name="WeaponName" class="form-control" aria-label="Weapon Name" placeholder="Player Level"/>
      </div>

      <div class="form-group">
        <label class="control-label">Rarity:</label>
        <div>
          <InputRadioGroup @bind-Value="gun.Rarity">
            @foreach (var rarity in (Rarity[])Enum.GetValues(typeof(Rarity)))
            {
              <label class="radio-inline label-separated">
                <InputRadio Value="@rarity" checked="@(rarity == gun.Rarity)" />
                @rarity
              </label>
            }
          </InputRadioGroup>
        </div>
      </div>

      <div class="form-group">
        <label class="control-label">Gun Type:</label>
        <div>
          <InputRadioGroup Value="gun.GunType" ValueExpression="@(() => gun.GunType)"
            ValueChanged="@((GunType value) => FilterByGunTypes(value))">
            @foreach (var gunType in (GunType[])Enum.GetValues(typeof(GunType)))
            {
              <label class="radio-inline label-separated">
                <InputRadio Value="@gunType" checked="@(gunType == gun.GunType)" />
                @gunType
              </label>
            }
          </InputRadioGroup>
        </div>
      </div>

      @if (guilds != null && guilds.Any())
      {
        <div class="form-group">
          <label class="control-label">Preferred Guild:</label>
          <InputSelect Value="gun.Guild" ValueExpression="@(() => gun.Guild)"
            ValueChanged="@((string value) => FavoriteGuildChanged(value))"class="form-control" aria-label="Preferred Guild">
            @foreach (var guild in guilds)
            {
                   <option value="@guild.Name" selected=@(guild.Name == gun.Guild)>@guild.Name</option>
            }
          </InputSelect>
        </div>
      }

      <hr/>
      <h5>Prefixes and Red Texts</h5>
      <div class="form-group">
        <label class="control-label">Use Custom Prefixes?</label>
        <input type="checkbox" checked="@(UseCustomPrefixes)" @onchange="eventArgs => { UseCustomPrefixes = !UseCustomPrefixes; }">
      </div>  
      
      <div class="form-group">
        <label class="control-label">Prefix:</label>
        
        @if (!UseCustomPrefixes){
          <InputSelect class="form-control" aria-label="Prefix" Value="PrefixName" ValueExpression="@(() => PrefixName)" ValueChanged="@((string prefix) => PrefixChanged(prefix))">
            <option value="" selected>None</option>
              @foreach (var kvp in prefixes)
                {
                      <option value="@kvp.Key" selected>@kvp.Key</option>
                }
            </InputSelect>
            @if(!string.IsNullOrWhiteSpace(PrefixEffect))
            {
              <span>@PrefixEffect</span>
            }
        }     
       else{
          <InputText @bind-Value="gun.Prefix.Name" name="PrefixName" class="form-control" aria-label="Prefix Name" aria-placeholder="Prefix Name" placeholder="Prefix Name"/>
          <InputText @bind-Value="gun.Prefix.Effect" name="PrefixEffect" class="form-control" aria-label="Prefix Effect" aria-placeholder="Prefix Effect" placeholder="Prefix Effect"/>
       }   
        </div>

      <div class="form-group">
        <label class="control-label">Use Custom Red Texts?</label>
        <input type="checkbox" checked="@(UseCustomRedTexts)" @onchange="eventArgs => { UseCustomRedTexts = !UseCustomRedTexts; }">
      </div> 

      <div class="form-group">
        <label class="control-label">Red Text:</label>
          @if (!UseCustomRedTexts)
          {
            <InputSelect class="form-control" aria-label="RedText" Value="RedTextName" ValueExpression="@(() => RedTextName)" ValueChanged="@((string redText) => RedTextChanged(redText))">
              <option value="" selected>None</option>
              @foreach (var kvp in redTexts)
              {
                <option value="@kvp.Key" selected>@kvp.Key</option>
              }
            </InputSelect>
            @if(!string.IsNullOrWhiteSpace(RedTextEffect))
            {
              <span>@RedTextEffect</span>
            }
          }
          else
          {
            <InputText @bind-Value="gun.RedText.Name" name="RedTextName" class="form-control" aria-label="RedText Name" aria-placeholder="RedText Name" placeholder="RedText Name"/>
            <InputText @bind-Value="gun.RedText.Effect" name="RedTextEffect" class="form-control" aria-label="RedText Effect" aria-placeholder="RedText Effect" placeholder="RedText Effect"/>
          }
        </div> 

        <div class="form-group">
          <label class="control-label">Damage: (i.e: 1d10)</label>
          <InputText @bind-Value="gun.Damage" name="Damage" class="form-control col-md-6" aria-label="Damage Dice Type" aria-placeholder="i.e. 1d4" placeholder="i.e. 1d4"/>
        </div>

        <div class="form-group">
          <label class="control-label">Range:</label>
          <InputNumber @bind-Value="gun.Range" name="Range" class="form-control" aria-label="Range" />
        </div>

        <div class="form-group">
          <label class="control-label">Elements:</label>
            <div>
            @foreach (var element in (Element[])Enum.GetValues(typeof(Element)))
            {
              @if (element == Element.None)
              {
                continue;
              }
              <label class="radio-inline label-separated">
                <input type="checkbox" @onchange="eventArgs => { ElementChanged(element, (bool)eventArgs.Value); }" />
                @element
              </label>
            }
          </div>
        </div>


        <div class="form-group">
          <label class="control-label">Additional Elemental Damage: (i.e: 1d10)</label>
          <InputText @bind-Value="gun.ExtraDamage" name="Elemental Damage Dice Type" class="form-control col-md-6" aria-label="Elemental Damage Dice Type" aria-placeholder="i.e. 1d4" placeholder="i.e. 1d4"/>
        </div>

        <hr/>
        <h5>Accuracy and Hits/Crits</h5>
        <div class="form-group">
          <label class="control-label">Use Custom Hits and Crits?</label>
          <input type="checkbox" checked="@(UseCustomHitsByAccuracy)" @onchange="eventArgs => { UseCustomHitsByAccuracy = !UseCustomHitsByAccuracy; }">
        </div>  
      
        @if (UseCustomHitsByAccuracy)
        {
          <div>
            @foreach(var hba in gun.HitsByAccuracy)
            {
                <div class="row">
                    <div class="col-sm-1">
                        @hba.Label:
                    </div>
                    <div class="col-sm-1">
                        Hits:
                    </div>
                    <div class="col-sm-4">
                        <InputNumber @bind-Value="hba.Hits" name="Hits" class="form-control" aria-label="Hits" />
                    </div>
                    <div class="col-sm-1">
                        Crits:
                    </div>
                    <div class="col-sm-4">
                        <InputNumber @bind-Value="hba.Crits" name="Crits" class="form-control" aria-label="Crits" />
                    </div>
                </div>
            }
          </div>
        }

        <hr/>
        <h5>Card Image</h5>

        <div class="form-group" >
            <label class="col-md-4 control-label">Card Image URL (Optional):</label>
            <div class="col-md-8">
                <InputText @bind-Value="gun.ImageUrl" name="ImageUrl" class="form-control" aria-label="Image Url"/>
            </div>
        </div>
    </EditForm>
  </div>

  <div class="col-md-4">
        <GunViewer CraftedGun=@gun/>
  </div>
</div>

@code {
  Gun gun = new Gun
  {
    GunType = GunType.CombatRifle,
    Element = Element.None,
    Rarity = Rarity.Common,
    RedText = new RedText(),
    Prefix = new Prefix()
  };

  string RedTextName = "";
  string RedTextEffect = "";
  string PrefixName = "";
  string PrefixEffect = "";
  bool UseCustomPrefixes = false;
  bool UseCustomRedTexts = false;
  bool UseCustomHitsByAccuracy = false;

  List<Guild> guilds = null;

  Dictionary<string, Prefix> prefixes = null; 
  
  Dictionary<string, RedText> redTexts = null;
    
  Dictionary<GunType, string> archetypeBonuses = null;

  protected override void OnInitialized()
  {
    prefixes = weaponCustomizationService.GetPrefixes();
    redTexts = weaponCustomizationService.GetRedTexts();
    archetypeBonuses = weaponCustomizationService.GetWeaponArchetypeBonuses();
    gun.HitsByAccuracy = weaponCustomizationService.GetWeaponArchetypeHits(gun.GunType, gun.Level);
    guilds = guildService.GetGuilds();
    gun.Guild = guilds.First().Name;
  }     


  void ElementChanged(Element element, bool changed)
  {
      if (changed)
      {
        gun.Element |= element;
      }
      else
      {
        gun.Element ^= element;
      }
      this.StateHasChanged();
  }

  void LevelChanged(int level)
  {
    gun.Level = level;
    if (!UseCustomHitsByAccuracy)
    {
      gun.HitsByAccuracy = weaponCustomizationService.GetWeaponArchetypeHits(gun.GunType, level);
    }
    this.StateHasChanged();
  }

  void FilterByGunTypes(GunType gunType)
  {
    gun.GunType = gunType;
    gun.GunArchetypeBonus = archetypeBonuses[gunType];
    if (!UseCustomHitsByAccuracy)
    {
      gun.HitsByAccuracy = weaponCustomizationService.GetWeaponArchetypeHits(gunType, gun.Level);
    }
    this.StateHasChanged();
  }

  void FavoriteGuildChanged(string guild)
  {
    gun.Guild = guild;
    var guildData = guildService.GetWeaponModifiers(guild, gun.Rarity);
    gun.GuildBonus = guildData?.Bonus ?? string.Empty;
    this.StateHasChanged();
  }

  void PrefixChanged(string prefix)
  {
      if (string.IsNullOrWhiteSpace(prefix))
      {
        gun.Prefix = new Prefix();
        PrefixEffect = string.Empty;
        PrefixName = string.Empty;
      }
      else
      {
        gun.Prefix = prefixes[prefix];
        PrefixEffect = gun.Prefix.Effect;
        PrefixName = gun.Prefix.Name;
      }
      
      this.StateHasChanged();
  }

  void RedTextChanged(string redText)
  {
      if (gun.RedText.Element.HasValue)
      {
        gun.Element ^= gun.RedText.Element.Value;
      }

      if (string.IsNullOrWhiteSpace(redText))
      {
        gun.RedText = new RedText();
        RedTextName = string.Empty;
        RedTextEffect = string.Empty;
      }
      else
      {
        gun.RedText = redTexts[redText];
        RedTextName = gun.RedText.Name;
        RedTextEffect = gun.RedText.Effect;
        if (gun.RedText.Element.HasValue)
        {
          gun.Element |= gun.RedText.Element.Value;
        }
      }
      
      this.StateHasChanged();
  }
}