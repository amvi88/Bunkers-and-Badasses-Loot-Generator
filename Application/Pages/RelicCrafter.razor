@page "/relic-crafter"
@namespace Application.Pages
@using Business.Services
@using Models.Builder;
@using Models.Common;
@using Models.Config;
@using Business.Factories;
@using Microsoft.Extensions.Options;

@inherits BaseItemCrafter
@inject IItemFactory<Relic, RelicRandomizerFactoryParameters> factory;
@inject IOptions<RelicConfigurationOptions> relicConfiguration;
@inject IWeaponCustomizationService weaponCustomizationService
@inject ILogger<RelicCrafter> logger


<PageTitle>B&B: How Mysterious</PageTitle>
<h1>Relic Crafting</h1>
<hr />

<div class="row">
    <div class="col-md-8">
        <EditForm Model=@relic>
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class=" control-label">Relic Name:</label>
                <div>
                    <InputText @bind-Value="relic.Type" name="Relic Name" class="form-control" aria-label="Relic Name" />
                </div>
            </div>

            <div class="mb-3">
                <label class=" control-label">Relic Effect:</label>
                <div>
                    <InputText @bind-Value="relic.Effect" name="Relic Effect" class="form-control" aria-label="Relic Effect" />
                </div>
            </div>

            <div class="mb-3">
                <label class=" control-label">Preferred Class:</label>
                <div>
                    <InputText @bind-Value="relic.PreferredClass" name="Preferred Class" class="form-control" aria-label="Preferred Class" />
                </div>
            </div>


            <div class="mb-3">
                <label class=" control-label">Class Effect:</label>
                <div>
                    <InputText @bind-Value="relic.ClassEffect" name="Class Effect" class="form-control" aria-label="Class Effect" />
                </div>
            </div>


            <div>
                <div class="mb-3">
                    <label class=" control-label">Rarity:</label>
                    <div>
                        <InputRadioGroup @bind-Value="relic.Rarity">
                            @foreach (var rarity in (Rarity[])Enum.GetValues(typeof(Rarity)))
                            {
                                @if (rarity != Rarity.Pearlescent)
                                {
                                    <InputRadio Value="@rarity" checked="@(rarity == Rarity.Common)" />
                                    <text>&nbsp;</text>
                                    @rarity
                                    <text>&nbsp;</text>
                                }
                            }
                        </InputRadioGroup>
                    </div>
                </div>
            </div>

            <div id="accordionFlush">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="flush-heading">
                        <button class="accordion-button collapsed" @onclick=ToggleAccordionOne type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapse" aria-expanded="false" aria-controls="flush-collapse">
                            Custom Image
                        </button>
                    </h2>
                    <div id="flush-collapse" class="accordion-collapse @AccordionOneClass" aria-labelledby="flush-heading" data-bs-parent="#accordionFlush">
                        <div class="accordion-body">
                            <div class="mb-3">
                                <div class="mb-3">
                                    <label class="control-label">Upload Custom Image</label>
                                    <input type="checkbox" checked="@(UseCustomImage)" @onchange="eventArgs => { UseCustomImage = !UseCustomImage; }">
                                </div>
                                @if (!UseCustomImage)
                                {
                                    <div class="mb-3">
                                        <label class="control-label">Card Image URL (Optional):</label>
                                        <InputText @bind-Value="relic.ImageUrl" name="ImageUrl" class="form-control" aria-label="Image Url" />
                                    </div>
                                }
                                else
                                {
                                    <div class="mb-3">
                                        <label class="control-label">Select an Image:</label>
                                        <InputFile OnChange="OnFileChange" class="form-control" accept=".png" />
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                 <div class="accordion-item">
                    <h2 class="accordion-header" id="flush-headingTwo">
                        <button class="accordion-button collapsed" type="button" @onclick=ToggleAccordionTwo data-bs-toggle="collapse" data-bs-target="#flush-collapseTwo" aria-expanded="false" aria-controls="flush-collapseTwo">
                            Red Texts
                        </button>
                    </h2>
                    <div id="flush-collapseTwo" class="accordion-collapse @AccordionTwoClass" aria-labelledby="flush-headingTwo" data-bs-parent="#accordionFlush">
                        <div class="accordion-body">                                               

                            <div class="mb-3">
                                <label class="control-label">Use Custom Red Texts?</label>
                                <input type="checkbox" checked="@(UseCustomRedTexts)" @onchange="eventArgs => { UseCustomRedTexts = !UseCustomRedTexts; }">
                            </div>

                            <div class="mb-3">
                                <label class="control-label">Red Text:</label>
                                @if (!UseCustomRedTexts)
                                {
                                    <InputSelect class="form-control" aria-label="RedText" Value="RedTextName" ValueExpression="@(() => RedTextName)" ValueChanged="@((string redText) => RedTextChanged(redText))">
                                        <option value="" selected>None</option>
                                        @foreach (var kvp in redTexts)
                                        {
                                            <option value="@kvp.Key" selected>@kvp.Key</option>
                                        }
                                    </InputSelect>
                                    @if (!string.IsNullOrWhiteSpace(RedTextEffect))
                                    {
                                        <span class="form-text">@RedTextEffect</span>
                                    }
                                }
                                else
                                {
                                    <InputText @bind-Value="relic.RedText.Name" name="RedTextName" class="form-control" aria-label="RedText Name" aria-placeholder="RedText Name" placeholder="RedText Name" />
                                    <InputText @bind-Value="relic.RedText.Effect" name="RedTextEffect" class="form-control" aria-label="RedText Effect" aria-placeholder="RedText Effect" placeholder="RedText Effect" />
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>

    <div class="col-md-4">
        <RelicViewer CraftedRelic=@relic />
    </div>
</div>

@code {
    Relic relic = new Relic() 
    { 
            RedText = new RedText(),
    };

    Dictionary<string, RedText> redTexts = null;
    bool UseCustomRedTexts = false;

    void RedTextChanged(string redText)
    {
        if (string.IsNullOrWhiteSpace(redText))
        {
            relic.RedText = new RedText();
            RedTextName = string.Empty;
            RedTextEffect = string.Empty;
        }
        else
        {
            relic.RedText = redTexts[redText];
            RedTextName = relic.RedText.Name;
            RedTextEffect = relic.RedText.Effect;
        }

        this.StateHasChanged();
    }

    async Task OnFileChange(InputFileChangeEventArgs eventArgs)
    {
        relic.ImageUrl = await EncodeImageFile(eventArgs);
    }

    protected override void OnInitialized()
    {
        redTexts = weaponCustomizationService.GetRedTexts();
    }
}
