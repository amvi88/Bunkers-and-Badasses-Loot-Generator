@namespace Application.Pages
@using Business
@using Business.Models;
@using Business.Models.Common;
@implements IAsyncDisposable
@inject IJSRuntime JS

@if (CraftedPotion == null)
{
  <div class="spinner"></div>
}
else
{
  <div id="cards">  

    <figure class=@GetCardCssClass id="lewt">      
      
      <figcaption class="card__caption">
        <h1 class="card__name normal"> @CraftedPotion.Effect</h1>
        
        <h3 class="card__type">
         @CraftedPotion.Name
        </h3>

        <table class="card__stats">
          <tbody>            
            <tr>
              <th>Cost</th>
              <td>@CraftedPotion.Cost<img class="icon icon-money" src="images/open-iconic/svg/contrast.svg" alt="Coin"></td>   
            </tr>            
          </tbody>
        </table>        
      </figcaption>
    </figure>
  </div>
  <button @onclick="Download" class="btn btn-primary">Download</button>
}

@code {
    [Parameter]
    public Potion CraftedPotion { get; set; }

    private IJSObjectReference? module;
    private string? result;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/index.js");
        }
    }

    private async Task Download()
    {
        result = await DownloadImage("cards");
    }

    public async ValueTask<string?> DownloadImage(string id) =>
        module is not null ? 
            await module.InvokeAsync<string>("downloadCard", id, "potion.png") : null;

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }

    public string @GetCardCssClass => CraftedPotion.IsTinyTinasPotion? "card card--tinytina" : "card card--normal";
}