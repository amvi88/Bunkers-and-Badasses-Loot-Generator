@page "/shield-crafter"
@namespace Application.Pages
@using Business;
@using Business.Services;
@using Models.Common;
@using Models.Builder;

@inherits BaseItemCrafter
@inject ILogger<ShieldCrafter> logger
@inject IGuildService guildService
@inject IWeaponCustomizationService weaponCustomizationService


<h1>Shields</h1>
<hr />
<PageTitle>B&B: Protection you own!</PageTitle>

<div class="row">
    <div class="col-md-8">
        <EditForm Model=@shield>
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="accordion accordion-flush" id="accordionFlush">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="flush-headingOne">
                        <button class="accordion-button collapsed" type="button" @onclick=ToggleAccordionOne data-bs-toggle="collapse" data-bs-target="#flush-collapseOne" aria-expanded="false" aria-controls="flush-collapseOne">
                            Shield Specifications
                        </button>
                    </h2>
                    <div id="flush-collapseOne" class="accordion-collapse @AccordionOneClass" aria-labelledby="flush-headingOne" data-bs-parent="#accordionFlush">
                        <div class="accordion-body">
                            <div class="mb-3">
                                <label for="ShieldLevel" class="control-label">Level:</label>
                                <InputNumber Value="shield.Level" ValueExpression="@(() => shield.Level)"
                                             ValueChanged="@((int value) => shield.Level = value)" name="ShieldLevel" class="form-control" aria-label="Shield Mod Level" />
                            </div>
                            <div class="mb-3">
                                <label for="text" class="control-label">Name:</label>
                                <InputText @bind-Value="shield.Name" name="ShieldName" class="form-control" aria-label="Shield Name" placeholder="Shield Name" />
                            </div>
                            <div class="mb-3">
                                <label for="text" class="control-label">Effect:</label>
                                <InputText @bind-Value="shield.Effect" name="ShieldEffect" class="form-control" aria-label="Shield Effect" placeholder="Shield Effect" />
                            </div>

                            @if (!UseCustomManufacturers && guilds != null && guilds.Any())
                            {
                                <div class="mb-3">
                                    <label class="control-label">Preferred Guild:</label>
                                    <InputSelect Value="shield.Guild" ValueExpression="@(() => shield.Guild)"
                                                 ValueChanged="@((string value) => FavoriteGuildChanged(value))" class="form-control" aria-label="Preferred Guild">
                                        @foreach (var guild in guilds)
                                        {
                                            <option value="@guild.Name" selected=@(guild.Name == shield.Guild)>@guild.Name</option>
                                        }
                                    </InputSelect>
                                </div>
                            }
                            else
                            {
                                <div class="mb-3">
                                    <label class="control-label">Guild:</label>
                                    <InputText @bind-Value="shield.Guild" name="GuildName" class="form-control" aria-label="Guild Name" aria-placeholder="Guild Name" placeholder="Guild Name" />
                                </div>
                                <div class="mb-3">
                                    <label class="control-label">Upload Custom Logo</label>
                                    <input type="checkbox" checked="@(UploadCustomManufacturerLogo)" @onchange="eventArgs => { UploadCustomManufacturerLogo = !UploadCustomManufacturerLogo; }">
                                </div>
                                @if (!UploadCustomManufacturerLogo)
                                {
                                    <div class="mb-3">
                                        <label class="control-label">Manufacturer Image URL (Optional):</label>
                                        <InputText @bind-Value="CustomManufacturerImage" name="CustomManufacturerImage" class="form-control" aria-label="Image Url" />
                                    </div>
                                }
                                else
                                {
                                    <div class="mb-3">
                                        <label class="control-label">Select an Image:</label>
                                        <InputFile OnChange="OnManufacturerImageChange" class="form-control" accept=".png" />
                                    </div>
                                }
                            }

                            <div class="mb-3">
                                <label class="control-label">Rarity:</label>
                                <div>
                                    <InputRadioGroup @bind-Value="shield.Rarity">
                                        @foreach (var rarity in (Rarity[])Enum.GetValues(typeof(Rarity)))
                                        {
                                            <label class="radio-inline label-separated">
                                                <InputRadio Value="@rarity" checked="@(rarity == shield.Rarity)" />
                                                @rarity
                                            </label>
                                        }
                                    </InputRadioGroup>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                 <div class="accordion-item">
                    <h2 class="accordion-header" id="flush-headingTwo">
                        <button class="accordion-button collapsed" type="button" @onclick=ToggleAccordionTwo data-bs-toggle="collapse" data-bs-target="#flush-collapseTwo" aria-expanded="false" aria-controls="flush-collapseTwo">
                            Red Texts
                        </button>
                    </h2>
                    <div id="flush-collapseTwo" class="accordion-collapse @AccordionTwoClass" aria-labelledby="flush-headingTwo" data-bs-parent="#accordionFlush">
                        <div class="accordion-body">                                               

                            <div class="mb-3">
                                <label class="control-label">Use Custom Red Texts?</label>
                                <input type="checkbox" checked="@(UseCustomRedTexts)" @onchange="eventArgs => { UseCustomRedTexts = !UseCustomRedTexts; }">
                            </div>

                            <div class="mb-3">
                                <label class="control-label">Red Text:</label>
                                @if (!UseCustomRedTexts)
                                {
                                    <InputSelect class="form-control" aria-label="RedText" Value="RedTextName" ValueExpression="@(() => RedTextName)" ValueChanged="@((string redText) => RedTextChanged(redText))">
                                        <option value="" selected>None</option>
                                        @foreach (var kvp in redTexts)
                                        {
                                            <option value="@kvp.Key" selected>@kvp.Key</option>
                                        }
                                    </InputSelect>
                                    @if (!string.IsNullOrWhiteSpace(RedTextEffect))
                                    {
                                        <span class="form-text">@RedTextEffect</span>
                                    }
                                }
                                else
                                {
                                    <InputText @bind-Value="shield.RedText.Name" name="RedTextName" class="form-control" aria-label="RedText Name" aria-placeholder="RedText Name" placeholder="RedText Name" />
                                    <InputText @bind-Value="shield.RedText.Effect" name="RedTextEffect" class="form-control" aria-label="RedText Effect" aria-placeholder="RedText Effect" placeholder="RedText Effect" />
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="accordion-item">
                    <h2 class="accordion-header" id="flush-headingThree">
                        <button class="accordion-button collapsed" type="button" @onclick=ToggleAccordionThree data-bs-toggle="collapse" data-bs-target="#flush-collapseThree" aria-expanded="false" aria-controls="flush-collapseThree">
                            Capacity and Recharge Rate
                        </button>
                    </h2>
                    <div id="flush-collapseThree" class="accordion-collapse @AccordionThreeClass" aria-labelledby="flush-headingThree" data-bs-parent="#accordionFlush">
                        <div class="accordion-body">
                            <div class="mb-3">
                                <label class="control-label">Capacity:</label>
                                <InputNumber Value="shield.Capacity" ValueExpression="@(() => shield.Capacity)"
                                             ValueChanged="@((int value) => shield.Capacity = value)" name="Capacity" class="form-control" aria-label="Shield Capacity" />
                            </div>

                            <div class="mb-3">
                                <label class="control-label">Recharge Rate:</label>
                                <InputNumber Value="shield.RechargeRate" ValueExpression="@(() => shield.RechargeRate)"
                                             ValueChanged="@((int value) => shield.RechargeRate = value)" name="Recharge Rate" class="form-control" aria-label="Shield Recharge Rate" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="accordion-item">
                    <h2 class="accordion-header" id="flush-headingFive">
                        <button class="accordion-button collapsed" @onclick=ToggleAccordionFive type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseFive" aria-expanded="false" aria-controls="flush-collapseFive">
                            Custom
                        </button>
                    </h2>
                    <div id="flush-collapseFive" class="accordion-collapse @AccordionFiveClass" aria-labelledby="flush-headingFive" data-bs-parent="#accordionFlush">
                        <div class="accordion-body">
                            <div class="mb-3">
                                <div class="mb-3">
                                    <label class="control-label">Use Custom Manufacturers?</label>
                                    <input type="checkbox" checked="@(UseCustomManufacturers)" @onchange="eventArgs => { UseCustomManufacturers = !UseCustomManufacturers; }">
                                </div>
                                <div class="mb-3">
                                    <label class="control-label">Use Borderlands Manufacturers?</label>
                                    <input type="checkbox" checked="@(UseBorderlandsManufacturers)" @onchange="eventArgs => { UseBorderlandsManufacturers = !UseBorderlandsManufacturers; }">
                                </div>
                                <div class="mb-3">
                                    <label class="control-label">Upload Custom Image</label>
                                    <input type="checkbox" checked="@(UseCustomImage)" @onchange="eventArgs => { UseCustomImage = !UseCustomImage; }">
                                </div>
                                @if (!UseCustomImage)
                                {
                                    <div class="mb-3">
                                        <label class="control-label">Card Image URL (Optional):</label>
                                        <InputText @bind-Value="shield.ImageUrl" name="ImageUrl" class="form-control" aria-label="Image Url" />
                                    </div>
                                }
                                else
                                {
                                    <div class="mb-3">
                                        <label class="control-label">Select an Image:</label>
                                        <InputFile OnChange="OnShieldImageFileChange" class="form-control" accept=".png" />
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </EditForm>
    </div>

    <div class="col-md-4">
        <ShieldViewer CraftedShield=@shield UseBorderlandsManufacturers=@UseBorderlandsManufacturers UseCustomManufacturers=@UseCustomManufacturers CustomManufacturerImage=@CustomManufacturerImage />
    </div>
</div>

@code {
    string CustomManufacturerImage = "";
    Dictionary<string, RedText> redTexts = null;
    bool UseCustomRedTexts = false;

    Shield shield = new Shield
        {
            Name = "My Shield",
            Effect = "None",
            RechargeRate = 0,
            Capacity = 0,
            RedText = new RedText()
        };

    protected override void OnInitialized()
    {
        guilds = guildService.GetGuilds();
        shield.Guild = guilds.First().Name;
        redTexts = weaponCustomizationService.GetRedTexts();
    }

    void RedTextChanged(string redText)
    {
        if (shield.RedText != null && shield.RedText.Element.HasValue)
        {
            shield.Element ^= shield.RedText.Element.Value;
        }

        if (string.IsNullOrWhiteSpace(redText))
        {
            shield.RedText = new RedText();
            RedTextName = string.Empty;
            RedTextEffect = string.Empty;
        }
        else
        {
            shield.RedText = redTexts[redText];
            RedTextName = shield.RedText.Name;
            RedTextEffect = shield.RedText.Effect;
            if (shield.RedText.Element.HasValue)
            {
                shield.Element |= shield.RedText.Element.Value;
            }
        }

        this.StateHasChanged();
    }

    void FavoriteGuildChanged(string guild)
    {
        var selectedGuild = guilds.First(x => x.Name == guild);
        shield.Guild = selectedGuild.Name;
        shield.AlternateGuildName = selectedGuild.AlternameName;
        this.StateHasChanged();
    }

    async Task OnShieldImageFileChange(InputFileChangeEventArgs eventArgs)
    {
        shield.ImageUrl = await EncodeImageFile(eventArgs);
    }

    async Task OnManufacturerImageChange(InputFileChangeEventArgs eventArgs)
    {
        CustomManufacturerImage = await EncodeImageFile(eventArgs);
    }
}